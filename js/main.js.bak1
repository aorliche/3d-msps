import { $, $$ } from "./util.js";

class PPD {
    constructor(params) {
        this.vertices = params.vertices ?? [];
    }       

    draw(ctx) {

    }
}

function initWebGL(webgl, vertices) {
    var vertexBuffer = webgl.createBuffer();

    webgl.bindBuffer(webgl.ARRAY_BUFFER, vertexBuffer);

    webgl.bufferData(
        webgl.ARRAY_BUFFER,
        new Float32Array(vertices),
        webgl.STATIC_DRAW
    );

    webgl.clearColor(0, 0.5, 0.5, 0.9);

    webgl.clear(webgl.COLOR_BUFFER_BIT);
}

function createVertexShader(webgl) {
	var vertexCode = `
	attribute vec2 coordinates; 
	void main(void) {
		gl_Position = vec4(
			coordinates,
			0.0,
			1.0
		);
	}`
	;
	var vertexShader = webgl.createShader(webgl.VERTEX_SHADER);
	webgl.shaderSource(vertexShader, vertexCode);
	webgl.compileShader(vertexShader);

	return vertexShader;
}

function createFragmentShader(webgl) {
	var fragmentCode = `
	void main(void) {
		gl_FragColor = vec4(
			0.0,
			0.0,
			0.0,
			0.1
		);
	}`
	;
	var fragmentShader = webgl.createShader(webgl.FRAGMENT_SHADER);

	webgl.shaderSource(fragmentShader, fragmentCode);
	webgl.compileShader(fragmentShader);

	return fragmentShader;
}

function createShaderProgram(webgl, vertexShader, fragmentShader) {
	var shaderProgram = webgl.createProgram();

	webgl.attachShader(shaderProgram, vertexShader); 
	webgl.attachShader(shaderProgram, fragmentShader);
	webgl.linkProgram(shaderProgram);
	webgl.useProgram(shaderProgram);

	return shaderProgram;
}

/**
     * Gets and sets the coordinates associating the compiled shader programs
     * to buffer objects.
     */
    function transformCoordinatesAndSet(webgl, shaderProgram) {
        var coordinates = webgl.getAttribLocation(
            shaderProgram,
           'coordinates'
        );
 
        webgl.vertexAttribPointer(
            coordinates,
            2,
            webgl.FLOAT,
            false,
            0,
            0
        );
 
        webgl.enableVertexAttribArray(coordinates);
    }
 
    /**
     * Draws the arrays.
     */
    function drawArrays(webgl) {
        webgl.drawArrays(webgl.TRIANGLES, 0, 3);
    }
 

window.addEventListener("load", () => {
    const canvas = $("#canvas");
    const webgl = canvas.getContext("webgl");
    
	const vertices = [
        0.8, 0.0,
        0.0, 1,
        1, 0.8
    ];
        
	initWebGL(webgl, vertices);

    const vertexShader = createVertexShader(webgl);
	const fragmentShader = createFragmentShader(webgl);
    const shaderProgram = createShaderProgram(webgl, vertexShader, fragmentShader);
 
	transformCoordinatesAndSet(webgl, shaderProgram);
 
	drawArrays(webgl);

});
